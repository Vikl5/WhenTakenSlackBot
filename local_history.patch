Index: src/main/kotlin/service/ChannelHistory.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/kotlin/service/ChannelHistory.kt b/src/main/kotlin/service/ChannelHistory.kt
--- a/src/main/kotlin/service/ChannelHistory.kt	
+++ b/src/main/kotlin/service/ChannelHistory.kt	(date 1721331792626)
@@ -50,28 +50,29 @@
         val messagesFromResponse = messageHistory.messages
         val filteredMessages = messagesFromResponse.filter { message ->
             message.type == "message" &&
-            message.user != "U07C01384TB" &&
-            message.botId == null &&
-            message.subtype == null &&
-            !message.text.isNullOrEmpty()
+                    message.user != "U07C01384TB" &&
+                    message.botId == null &&
+                    message.subtype == null &&
+                    !message.text.isNullOrEmpty()
         }
         logger.info("Filtered messages count: ${filteredMessages.size}")
+
         val scoreRegex = """I scored (\d+)/1000""".toRegex()
-
         val mapOfUserScores = mutableMapOf<String, MutableList<Int>>()
+
         for (message in filteredMessages) {
             logger.info("Processing message: ${message.text}")
             val scoreInMessages = scoreRegex.find(message.text)
             if (scoreInMessages != null) {
                 val score = scoreInMessages.groups[1]?.value?.toIntOrNull()
                 if (score != null) {
-                  val userId = message.user
-                    if (mapOfUserScores.containsKey(userId)) {
-                        mapOfUserScores[userId]?.add(score)
+                    val username = message.user
+                    if (mapOfUserScores.containsKey(username)) {
+                        mapOfUserScores[username]?.add(score)
                     } else {
-                        mapOfUserScores[userId] = mutableListOf(score)
+                        mapOfUserScores[username] = mutableListOf(score)
                     }
-                    logger.info("Extracted score: $score for user: $userId")
+                    logger.info("Extracted score: $score for user: $username")
                 } else {
                     logger.warn("Score is null for message: ${message.text}")
                 }
@@ -80,23 +81,19 @@
             }
         }
 
-        mapOfUserScores.forEach { (username, score) ->
-            logger.info("Filtered message from user $username with score: $score")
-        }
-
-        val userScoresWithNames = mutableListOf<Pair<String, Int>>()
-        for ((userId, scores) in mapOfUserScores) {
-            val username = fetchUsername(userId) ?: userId
+        mapOfUserScores.forEach { (username, scores) ->
             logger.info("Filtered messages from user $username with scores: $scores")
-            for (score in scores) {
-                userScoresWithNames.add(username to score)
-            }
+        }
+
+        val flattenedScores = mapOfUserScores.flatMap { (username, scores) ->
+            scores.map { username to it }
         }
 
-        val sortedScores = highScoreSorting.sortHighScore(userScoresWithNames)
+        val sortedScores = highScoreSorting.sortHighScore(flattenedScores)
         logger.info("Final sorted scores: $sortedScores")
         return sortedScores
 
+
 //        val mapOfMessages = filteredMessages
 //            .filter { it.text.startsWith("#Whentaken") }
 //            .associate { it.username to it.text }
